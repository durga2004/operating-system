#include <stdio.h>
#include <unistd.h>
#include <signal.h> 
  return 1;
void handler(int sig){
}
int main(void){
  pid_t child_pid;
  pid_t parent_pid;
  struct sigaction sa;
  parent_pid = getpid();
  sigemptyset(&sa.sa_mask);
  sa.sa_handler = handler;
  sa.sa_flags = 0;
  if(sigaction(SIGUSR1,&sa,NULL) == -1){
    ERROR("sigaction()");
  }
  switch(child_pid = fork()){
  case -1:
    ERROR("fork()");
  case 0:  
    for(int number = 2; number <= 10; number += 2){
      pause();
      printf("Child: %d\n",number);
      kill(parent_pid,SIGUSR1);
    }
    break;
  default: 
    for(int number = 1; number <= 9; number += 2){
      printf("Parent: %d\n",number);
      kill(child_pid,SIGUSR1);
      pause();
    }
    break;
  }
}
